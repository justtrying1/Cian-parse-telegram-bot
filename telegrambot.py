
#API_TOKEN = '7006315291:AAE_Nb6L-pNyVi5tFylMycjZnkAYrkkzyYs'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API_TOKEN = '7535762439:AAFtiztp9pG3JsPnX7T7IRjuB6cQtqe5sno'
JSON_FILE_PATH = '&rent&30000&40000&1 room&–ú–æ—Å–∫–≤–∞&2024-09-30 22-40-46.json'
import telebot
import json
import time
import os
import re
import datetime
from datetime import timedelta
from datetime import datetime
from copy import deepcopy
from telebot import types
import traceback

#API_TOKEN = 'YOUR_API_TOKEN'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(API_TOKEN)

TINY_DB = {}
# –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É JSON-—Ñ–∞–π–ª—É
#JSON_FILE_PATH = 'ads.json'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É JSON-—Ñ–∞–π–ª—É
#  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL –æ–±—ä—è–≤–ª–µ–Ω–∏–π
PARAMS_FILE = "params.json"
CACHE_FILE = "cache.json"
ACTION_FILE = "actions"
ACTION_FILE = "{ACTION_FILE}.json".format(ACTION_FILE=ACTION_FILE)
def load_action():
    try:
        if os.path.exists(ACTION_FILE):
            with open(ACTION_FILE, 'r', encoding='utf-8') as file:
                return json.load(file)
        else:
            return {}
    except:
        return {}
    

@bot.message_handler(commands=['buy'])
def buy(message):
    if message.from_user.id == 7494874190:
        activate_subscription(message)

    # –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
    title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å"
    description = """–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –í–∞—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –¶–∏–∞–Ω–∞‚úÖ –í —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è‚úÖ –≠–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è –∏ –±—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º–∏"""
    payload = "CUSTOM_PAYLOAD"  # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ
    currency = "XTR"  # –í–∞–ª—é—Ç–∞
    prices = [telebot.types.LabeledPrice("–î–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", 100)] 

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    bot.send_invoice(
        chat_id=message.chat.id,
        title=title,
        description=description,
        currency=currency,
        invoice_payload=payload,
        provider_token=None,
        photo_url=None,
        photo_size=None,
        photo_width=None,
        photo_height=None,
        is_flexible=False,
        prices = prices
    )

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(commands=['subscription'])
def check_subscription(message):
    state, msg = get_subscription_state(message.chat.id)
    bot.send_message(message.chat.id, msg)
        
        
def get_subscription_state(chat_id):
    all_params = load_parameters()
    now = datetime.now()
    msg = ""
    if "subscription" in all_params[str(chat_id)]:
        
        sub = all_params[str(chat_id)]['subscription']
    else:
        sub = all_params[str(chat_id)]['test_subscription']
    
    if (datetime.strptime(sub, '%d-%m-%Y  %H:%M:%S') - now).total_seconds() > 0:
        
        msg = msg + "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {}".format(sub) + "\n"
        return True, msg
    else:
        msg = msg + "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {}".format(sub) + "\n"
        return False, msg
   

def activate_subscription(message):
    chat_id = str(message.chat.id)
    all_params = load_parameters()

    all_params[chat_id]['subscription'] = (datetime.now() + timedelta(days=14)).strftime('%d-%m-%Y  %H:%M:%S')
    
    save_parameters(all_params)

    bot.send_message(int(message.chat.id), "–í–∞—à–∞ –¥–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    print("someone bought something")
    bot.send_message(message.chat.id,
                     '–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç–µ–ø–µ—Ä—å –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscription')
                     
@bot.message_handler(commands=['refund'])
def refund_asked(message):
    if message.from_user.id == 7494874190:
        bot.send_message(message.chat.id, "asdfasfd")
        bot.register_next_step_handler(message, lambda msg : a(msg))

@bot.message_handler(commands=['test_subscription'])
def activate_test_subscription(message):
    #import pdb; pdb.set_trace()
    
    chat_id = str(message.chat.id)
    all_params = load_parameters()
    if 'test_subscription' not in all_params[chat_id]:

        all_params[chat_id]['test_subscription'] = (datetime.now() + timedelta(days=3)).strftime('%d-%m-%Y  %H:%M:%S')
        
        save_parameters(all_params)

        bot.send_message(int(message.chat.id), "–í–∞—à–∞ —Ç—Ä—ë—Ö–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    else:
        bot.send_message(int(message.chat.id), "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")

def a(message):
    user_id = int(message.text)
    bot.refund_star_payment(user_id, "refund")

@bot.message_handler(commands=['transactions'])
def get_stars(message):
    print(message.from_user.id)
    if message.from_user.id == 7494874190:
        for i in bot.get_star_transactions().transactions:
            print(i) 
        bot.send_message(message.chat.id, str(bot.get_star_transactions()))    

def save_action(chat_id, action_name):
    #import pdb; pdb.set_trace()
    action = load_action()
    if str(chat_id) not in action.keys():
        action[str(chat_id)] = {}
    action[str(chat_id)][datetime.now().strftime('%Y-%m-%d %H-%M-%S')] = action_name
    if action_name == "i am here":
        with open("heres.json", 'w', encoding='utf-8') as file:
            json.dump(action, file, ensure_ascii=False)
    else:
        with open(ACTION_FILE, 'w', encoding='utf-8') as file:
            json.dump(action, file, ensure_ascii=False)
    
def load_cache():
    with open(CACHE_FILE, "r", encoding='utf-8') as file:
       a = json.load(file)
    return a


def save_cache(appeared):
  #  print(len(appeared))
    all_params = load_parameters()
    sent_list = {}
    cache = load_cache()
    print(all_params.keys())
    for i in all_params.keys():
        if all_params[i] == {}:
            try:
                #bot.send_message(int(i), "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Ç–µ—Ä—è–Ω—ã –≤—Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–∏—Å–∫–∏–º–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞–º–∏, —á—Ç–æ–±—ã –∏ –¥–∞–ª—å—à–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
                continue
            except:
                
                print(traceback.format_exc())
                continue
        chat_id = all_params.get(i)['chat_id']
        new_filtered_ads = filter_ads(appeared, all_params.get(i))
        sent_list[chat_id] = str(len(new_filtered_ads))
       # print(str(len(new_filtered_ads)) + "–¥–ª–∏–Ω–∞ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è")
        if str(chat_id) not in cache.keys():
            cache[str(chat_id)] = {}
      #  print(i)
        try:
            if isinstance(cache[str(chat_id)]['last 20'], list):
                cache[str(chat_id)]['last 20'] = {}
        except:
            pass
        if 'last 20' in cache[str(chat_id)].keys():
            pass
        else:
            cache[str(chat_id)]['last 20'] = {}
        if len(cache[str(chat_id)]['last 20'].keys()) > 20:
            for j in list(cache[str(chat_id)]['last 20'].keys())[:-20]:
                cache[str(chat_id)]['last 20'].pop(j)
        if(len(new_filtered_ads)) > 0:
             
           # import pdb; pdb.set_trace()            
            
            try:
              #  import pdb; pdb.set_trace()
                parsed_count = 0
                for ad in new_filtered_ads:
                    cache[str(chat_id)]['last 20'][ad['url']] = ad['description']  
                    
                    time_ = datetime.strptime(ad['time'], '%Y-%m-%d %H-%M-%S')
                    button_bar = types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data='{}'.format(ad['url']))
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(button_bar)
                    msg = f"""–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {time_}\n
{ad['title']}
üöá–ú–µ—Ç—Ä–æ: {ad['underground']} {ad['metro_dist']}
üßç‚Äç‚ôÇÔ∏è–ê–≤—Ç–æ—Ä: {ad['author_type']}
üí∏–¶–µ–Ω–∞: {ad['price_per_month']}‚ÇΩ
üèò–†–∞–π–æ–Ω: {ad['district']}
üîó–ò—Å—Ç–æ—á–Ω–∏–∫: {ad['url']}\n
"""
                    if 'addon' in ad:
                        parsed_addon = parse_addon(ad['addon'], params=all_params.get(i), good_description=ad['good_description'])
                        msg = parsed_addon + msg    
                  #  import pdb; pdb.set_trace()
                    else:
                        parsed_addon = ""
                    
                    sub_flag = False
                    if parsed_addon != "":
                        parsed_count = parsed_count + 1 
                        print("addon parsed!")
                        if chat_id == 7494874190:
                            bot.send_message(chat_id="@FlatoonChat", text= msg)
                        if "test_subscription" not in all_params[i]:
                            sub_flag = True
                        elif get_subscription_state(chat_id):
                            bot.send_message(chat_id, msg, reply_markup=keyboard)   
                        else:
                            sub_flag = True
                
                       
                    
                    elif chat_id == 7494874190:
                        bot.send_message(chat_id="@FlatoonChat", text=ad['good_description']+"\n" + msg)
                        bot.send_message(chat_id, ad['good_description']+"\n" + msg + "\n")

                if parsed_count > 0: 
                    button_bar = types.InlineKeyboardButton('–î–∞', callback_data="i am here")
                    button_bar2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data="i am no")
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(button_bar)
                    keyboard.add(button_bar2)
                    
                    if sub_flag:
                        bot.send_message(chat_id, "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é /test_subscription –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /buy")
                    else:
                        if "answered" not in all_params.get(i).keys():

                            bot.send_message(chat_id, text='–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º —Å–µ—Ä–≤–∏—Å?', reply_markup=keyboard)
                        bot.send_message(chat_id, text='–ü–æ—è–≤–∏–ª–æ—Å—å {} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start\n'    
                                        "t.me/FlatoonChat - –∫–∞–Ω–∞–ª —Å–æ –≤—Å–µ–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏".format(str(parsed_count)))
                
            except:
              #  if chat_id == 7494874190:
                   # import pdb; pdb.set_trace()
                print(traceback.format_exc())
                
            save_action("sent", sent_list)
        while True:
            try:
                with open(CACHE_FILE, "w+", encoding='utf-8') as file:
                    json.dump(cache, file, ensure_ascii=False)
                break
            except:
                pass
def load_parameters():
    if os.path.exists(PARAMS_FILE):
        with open(PARAMS_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ñ–∞–π–ª
def save_parameters(params):
    with open(PARAMS_FILE, 'w', encoding='utf-8') as file:
        json.dump(params, file, ensure_ascii=False)

def get_chat_parameters(chat_id):
    all_params = load_parameters()
    return all_params.get(str(chat_id), None)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON
def load_ads():
    with open(JSON_FILE_PATH, 'r', encoding='utf-8') as file:
        return json.load(file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ü–µ–Ω–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç
def filter_ads(ads, criteria):
    filtered = []
    for ad in ads:       
        for room_criteria in criteria['rooms']:
            try:
                dodo = (criteria['metro_dist'])
            except KeyError:
                criteria['metro_dist'] = 1000
            try:
                dodo = (criteria['author_type'])
            except KeyError:
                criteria['author_type'] = "–õ—é–±–æ–π"
            
            metro_dist = int(ad['metro_dist'].split(" ")[0])
            try:
                if criteria['author_type'] == "–í–ª–∞–¥–µ–ª–µ—Ü" and ad['author_type'] == "–í–ª–∞–¥–µ–ª–µ—Ü":
                    try:
                        if (metro_dist <= criteria['metro_dist'] + 8 and room_criteria['min_price'] <= ad['price_per_month'] <= room_criteria['max_price'] and
                            ad['rooms_count'] == room_criteria['rooms'] and (list(filter(re.compile ( criteria['undergrounds'] ).match, ad['underground'])) or list(filter(re.compile ( criteria['geolabel'] ).match, ad['underground'])) )):
                            filtered.append(ad)
                    except:    
                        if (metro_dist <= criteria['metro_dist'] + 8 and room_criteria['min_price'] <= ad['price_per_month'] <= room_criteria['max_price'] and
                            ad['rooms_count'] == room_criteria['rooms'] and
                            ((list(filter(re.compile(ad['underground']).match, criteria['undergrounds']) or list(filter(re.compile ( ad['underground'] ).match, criteria['geolabel'])))))):
                        
                                filtered.append(ad)
                elif criteria['author_type'] != "–í–ª–∞–¥–µ–ª–µ—Ü":
                    try:
                        if (metro_dist < criteria['metro_dist'] and room_criteria['min_price'] <= ad['price_per_month'] <= room_criteria['max_price'] and
                            ad['rooms_count'] == room_criteria['rooms'] and list(filter(re.compile ( criteria['undergrounds'] ).match, ad['underground']))):
                            filtered.append(ad)
                    except:    
                        if (metro_dist < criteria['metro_dist'] and room_criteria['min_price'] <= ad['price_per_month'] <= room_criteria['max_price'] and
                            ad['rooms_count'] == room_criteria['rooms'] and
                            (list(filter(re.compile(ad['underground']).match, criteria['undergrounds'])))):
                        
                                filtered.append(ad)
                elif criteria['author_type'] == "–í–ª–∞–¥–µ–ª–µ—Ü" and ad['author_type'] != "–í–ª–∞–¥–µ–ª–µ—Ü":
                    break
            except KeyError:
                pass        
    return filtered

def parse_addon(addon, params, good_description):
    addon = addon[0]
    if any("–¥–≤–æ–µ" in a for a in params['sex']) and (not any("–ú—É–∂" in a for a in params['sex']) or not any ("–ñ–µ–Ω" in a for a in params['sex'])):
        params['sex'] = params['sex'] + ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]
    if not any("–û–¥–∏–Ω" in a for a in params['mates']) and not any("–æ–¥–Ω–æ–≥–æ" in a for a in params['mates']):
        params['mates'].append("–æ–¥–Ω–æ–≥–æ")

    flag = True
    if "—Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ" in addon:
        addon["—Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ?"] = addon["—Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ"] 
    try:
        if "–Ω–µ —É–∫–∞–∑–∞–Ω–æ" in addon['–º–æ–∂–Ω–æ –ª–∏ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏'] and not any("–ø—Ä–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö" in a for a in params['animal']) and params['animal'] != []:
            raise Exception
        if ("–Ω–µ —É–∫–∞" in str(addon["—Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ?"])) or (addon["—Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ?"] <=1 ) or (any("–æ–¥–Ω–æ–≥–æ" in a for a in params['mates'])) or (((len(list(addon['–∫—Ç–æ –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç'].values()))) == 1) and any("–û–¥–∏–Ω" in a for a in params['mates'])):
            #import pdb;pdb.set_trace()
            print(len(list(addon['–∫—Ç–æ –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç'].values())))
            mates = addon['–∫—Ç–æ –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç']
            for mate in mates:
                if not any('–Ω–∏–∫—Ç–æ' in a for a in  mates) or len(mates) != 1:
                
                    if (any("–∂–µ–Ω—â–∏–Ω–∞" in a for a in [mate]) or any("–∂–µ–Ω—â–∏–Ω–∞" in str(a) for a in addon['–∫—Ç–æ –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç'][mate])) and not any("–ñ–µ–Ω—â–∏–Ω—ã" in a for a in params['mates']) and any("–ú—É–∂—á–∏–Ω—ã" in a for a in params['mates']):
                        raise Exception
                    if (any("–º—É–∂—á–∏–Ω–∞" in a for a in [mate]) or any("–º—É–∂—á–∏–Ω–∞" in str(a) for a in  addon['–∫—Ç–æ –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç'][mate])) and not any("–ú—É–∂—á–∏–Ω—ã" in a for a in params['mates']) and any("–ñ–µ–Ω—â–∏–Ω—ã" in a for a in params['mates']):
                        raise Exception 
                    
                else:
                    pass
        else:
            raise Exception
    
        a = 0
        try:
            a = int(addon['—Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ'])
        except:
            pass
        if a !=0:
            if any("–û–¥–∏–Ω" in a for a in params['mates']) and not any("–æ–¥–Ω–æ–≥–æ" in a for a in params['mates']) and int(addon['—Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ']) > 2 and any("–Ω–µ —É–∫–∞–∑–∞–Ω–æ" in a for a in addon['–∫—Ç–æ –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç']):
                print(addon)
                print("komnat v kvartire" + str(addon['—Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ']))
                raise Exception
            elif addon['—Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ'] == 1:
                addon['—Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ'] = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        

        #if (any("–º—É–∂—á–∏–Ω–∞" in a for a in addon['—Ç–∏–ø —Ä–∞–∑—ã—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –∂–∏–ª—å—Ü–∞']) and any("–ú—É–∂—á–∏–Ω–∞" in a for a in params['sex'])) or (any("–∂–µ–Ω—â–∏–Ω–∞" in a for a in addon['—Ç–∏–ø —Ä–∞–∑—ã—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –∂–∏–ª—å—Ü–∞']) and any("–ñ–µ–Ω—â–∏–Ω–∞" in a for a in params['sex'])) or (any("—á–µ–ª–æ–≤–µ–∫" in a for a in addon['—Ç–∏–ø —Ä–∞–∑—ã—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –∂–∏–ª—å—Ü–∞'])):
        #    pass
       # else:
            #import pdb;pdb.set_trace()
        #    raise Exception 
        all_net_general = "–Ω–µ—Ç" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞'] and ("–Ω–µ—Ç" in addon['–∏—â—É—Ç –ª–∏ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫'])
        all_net = (("–Ω–µ—Ç" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∏–∑ –º—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã"]) and ("–Ω–µ—Ç" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∂–µ–Ω—â–∏–Ω/–¥–µ–≤—É—à–µ–∫"]) and "–Ω–µ—Ç" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –º—É–∂—á–∏–Ω/–ø–∞—Ä–Ω–µ–π"]  and "–Ω–µ—Ç" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É/–ø–∞—Ä–Ω—è'] and "–Ω–µ—Ç" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω—É –∂–µ–Ω—â–∏–Ω—É/–¥–µ–≤—É—à–∫—É'])
        user_man = any("–ú—É–∂" in a for a in params['sex']) and not any("–ñ–µ–Ω" in a for a in params['sex']) and not any("–¥–≤–æ–µ" in a for a in params['sex'])
        user_woman = not any("–ú—É–∂" in a for a in params['sex']) and  any("–ñ–µ–Ω" in a for a in params['sex']) and not any("–¥–≤–æ–µ" in a for a in params['sex'])
        
        user_pair = any("–ú—É–∂" in a for a in params['sex']) and any("–ñ–µ–Ω" in a for a in params['sex']) and any("–¥–≤–æ–µ" in a for a in params['sex'])
        user_guys =  any("–ú—É–∂" in a for a in params['sex']) and not any("–ñ–µ–Ω" in a for a in params['sex']) and any("–¥–≤–æ–µ" in a for a in params['sex'])
        user_girls = not any("–ú—É–∂" in a for a in params['sex']) and  any("–ñ–µ–Ω" in a for a in params['sex']) and any("–¥–≤–æ–µ" in a for a in params['sex'])
        
        if (user_man or user_woman) and (not "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞'] and (not "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É/–ø–∞—Ä–Ω—è']) and not "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω—É –∂–µ–Ω—â–∏–Ω—É/–¥–µ–≤—É—à–∫—É']) and "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫']:
            raise Exception
        if (user_pair or user_guys or user_girls) and (not "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫'] and ("–Ω–µ" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∏–∑ –º—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã"]) and ("–Ω–µ" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∂–µ–Ω—â–∏–Ω/–¥–µ–≤—É—à–µ–∫"]) and "–Ω–µ" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –º—É–∂—á–∏–Ω/–ø–∞—Ä–Ω–µ–π"]) and "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞']:
            raise Exception
        if user_pair and "–Ω–µ—Ç" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∏–∑ –º—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã"] and not all_net:
                raise Exception
        if user_guys and "–Ω–µ—Ç" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –º—É–∂—á–∏–Ω/–ø–∞—Ä–Ω–µ–π" ] and not all_net:
            raise Exception
        if user_girls and "–Ω–µ—Ç" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∂–µ–Ω—â–∏–Ω/–¥–µ–≤—É—à–µ–∫"] and not all_net:
            raise Exception
        if user_girls and ("–Ω–µ —É–∫–∞–∑–∞–Ω–æ" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∂–µ–Ω—â–∏–Ω/–¥–µ–≤—É—à–µ–∫"]) and (("–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –º—É–∂—á–∏–Ω/–ø–∞—Ä–Ω–µ–π"]) or "–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∏–∑ –º—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã"] or "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É/–ø–∞—Ä–Ω—è'] or "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω—É –∂–µ–Ω—â–∏–Ω—É/–¥–µ–≤—É—à–∫—É']):
            raise Exception
        if user_guys and "–Ω–µ —É–∫–∞–∑–∞–Ω–æ" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –º—É–∂—á–∏–Ω/–ø–∞—Ä–Ω–µ–π"] and (("–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∂–µ–Ω—â–∏–Ω/–¥–µ–≤—É—à–µ–∫"]) or "–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∏–∑ –º—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã"]  or "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É/–ø–∞—Ä–Ω—è'] or "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω—É –∂–µ–Ω—â–∏–Ω—É/–¥–µ–≤—É—à–∫—É']):
            raise Exception
        if user_pair and "–Ω–µ —É–∫–∞–∑–∞–Ω–æ" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∏–∑ –º—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã"] and (("–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∂–µ–Ω—â–∏–Ω/–¥–µ–≤—É—à–µ–∫"]) or "–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –º—É–∂—á–∏–Ω/–ø–∞—Ä–Ω–µ–π"]  or "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É/–ø–∞—Ä–Ω—è'] or "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω—É –∂–µ–Ω—â–∏–Ω—É/–¥–µ–≤—É—à–∫—É']):
            raise Exception
        if "–Ω–µ —É–∫–∞–∑–∞–Ω–æ" in addon['–∏—â—É—Ç –ª–∏ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫'] and not any("–ñ–µ–Ω" in a for a in params['sex']) and not any("–ú—É–∂" in a for a in params['sex']) and any("–¥–≤–æ–µ" in a for a in params['sex']) and ("–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É/–ø–∞—Ä–Ω—è'] or "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω—É –∂–µ–Ω—â–∏–Ω—É/–¥–µ–≤—É—à–∫—É']):
            raise Exception
        if not user_man and not user_woman and "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫'] and any("–¥–≤–æ–µ" in a for a in params['sex']):
            
            pass   
        
        elif  not user_man and not user_woman and ("–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞']) and any("–¥–≤–æ–µ" in a for a in params['sex']):
            raise Exception
        
        
        #import pdb;pdb.set_trace()
        
        if user_man and "–Ω–µ—Ç" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É/–ø–∞—Ä–Ω—è']:
            raise Exception
        
        if  user_woman  and "–Ω–µ—Ç" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω—É –∂–µ–Ω—â–∏–Ω—É/–¥–µ–≤—É—à–∫—É']: 
            raise Exception
        
        if user_woman and  (("–Ω–µ —É–∫–∞–∑–∞–Ω–æ" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω—É –∂–µ–Ω—â–∏–Ω—É/–¥–µ–≤—É—à–∫—É']) and ("–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É/–ø–∞—Ä–Ω—è'] or ("–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –º—É–∂—á–∏–Ω/–ø–∞—Ä–Ω–µ–π"]) or "–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∏–∑ –º—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã"]  or "–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∂–µ–Ω—â–∏–Ω/–¥–µ–≤—É—à–µ–∫"])):
            raise Exception
        
        if user_man and  (("–Ω–µ —É–∫–∞–∑–∞–Ω–æ" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É/–ø–∞—Ä–Ω—è']) and "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω—É –∂–µ–Ω—â–∏–Ω—É/–¥–µ–≤—É—à–∫—É']  or (("–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –º—É–∂—á–∏–Ω/–ø–∞—Ä–Ω–µ–π"]) or "–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∏–∑ –º—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã"]  or "–¥–∞" in addon["–∏—â—É—Ç –ª–∏ –ø–∞—Ä—É –∂–µ–Ω—â–∏–Ω/–¥–µ–≤—É—à–µ–∫"])):    
            raise Exception
        
        if not user_man and not user_woman and "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞'] and not any("–¥–≤–æ–µ" in a for a in params['sex']):
            pass  
        if not user_man and not user_woman and "–¥–∞" in addon['–∏—â—É—Ç –ª–∏ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫'] and not any("–¥–≤–æ–µ" in a for a in params['sex']):
            raise Exception
       # import pdb; pdb.set_trace()
        if (any("–∫–æ—à–∫–∞" in a for a in addon['–º–æ–∂–Ω–æ –ª–∏ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏']) and any("–ö–æ—à–∫–∞" in a for a in params['animal'])) or (("c–æ–±–∞"in addon['–º–æ–∂–Ω–æ –ª–∏ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏']) and any("–°–æ–±–∞–∫–∞" in a for a in params['animal'])) or ("–¥–∞" in addon['–º–æ–∂–Ω–æ –ª–∏ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏']) or "–Ω–µ " in addon['–º–æ–∂–Ω–æ –ª–∏ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏']:
            pass
        elif params['animal'] != []:
            #import pdb;pdb.set_trace()
            raise Exception
    except Exception as e:
        print(traceback.format_exc())
        flag = False
    msg = ""
    if flag:
       
        try:   
            msg = msg + "\n" + good_description
            
        except Exception as e:
            print(traceback.format_exc())
        
        #print(addon['–∫—Ç–æ –∂–∏–≤—ë—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç'])
        return msg
    else:
        return "" #POPRAV
    
        
def format_time_passed(item_time):
    now = datetime.now()
    time_diff = now - item_time

    if time_diff < timedelta(minutes=1):
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif time_diff < timedelta(hours=1):
        minutes = time_diff.seconds // 60
        return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    elif time_diff < timedelta(days=1):
        hours = time_diff.seconds // 3600
        return f"{hours} —á. –Ω–∞–∑–∞–¥"
    else:
        days = time_diff.days
        return f"{days} –¥. –Ω–∞–∑–∞–¥"
# –ö–æ–º–∞–Ω–¥–∞ /start
def test_message(txt):
    for chat_id in load_parameters().keys():
        try:
            bot.send_message(int(chat_id),txt)
        except:
            pass

def main():
    @bot.callback_query_handler(func=lambda call: True)
    def callback_query(call):
      #  import pdb; pdb.set_trace()
        global TINY_DB
        if "i am" in call.data:
            all_params = load_parameters()
            params = all_params[str(call.message.chat.id)]
            #params = get_chat_parameters(call.message.chat.id)
            if "no" in call.data:
                params['answered'] = 0
                bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ —Ä–∞–±–æ—Ç–µ –±–æ–∞—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @milkicow, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç—É –¥–∞–ª—å—à–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è")
            else:
                params['answered'] = 1
                bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤. –Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, –æ –ª—é–±—ã—Ö –Ω–µ–¥–æ—á—ë—Ç–∞—Ö –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @milkicow, —Ç–æ–≥–¥–∞ –≤—ã –ø–æ–º–æ–∂–µ—Ç–µ –±–æ—Ç—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –¥–∞–ª—å—à–µ.")
            
            all_params[str(call.message.chat.id)] = params
            save_parameters(params=all_params)
        
            print("here" + str(call.message.chat.id))
        if 'startstart' in call.data:
            start_start(call.message)
        if 'sex' in call.data:
            
            keyboard = types.InlineKeyboardMarkup()
           # list = [types.InlineKeyboardButton('–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã', callback_data='start 2'), types.InlineKeyboardButton('–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã', callback_data='start 1'), types.InlineKeyboardButton('–ö–æ–º–Ω–∞—Ç—ã', callback_data='start 0')]
            list = [types.InlineKeyboardButton('–ù–∞—Å –¥–≤–æ–µ', callback_data='sex 3'), types.InlineKeyboardButton('–Ø –æ–¥–∏–Ω', callback_data='sex 2'), types.InlineKeyboardButton('–ú—É–∂—á–∏–Ω–∞ü§µ‚Äç‚ôÇÔ∏è', callback_data='sex 1'), types.InlineKeyboardButton('–ñ–µ–Ω—â–∏–Ω–∞üë©‚Äçü¶±', callback_data='sex 0')]
            
            if call.data.split()[1] == "continue":
                get_mates(call.message)
                l = []
                for i in TINY_DB[call.message.chat.id]['sex_input']:
                    if i:
                        l.append(list.pop().text)
                    else:
                        list.pop()
                TINY_DB[call.message.chat.id]['sex_input'] = l
            else:
                TINY_DB[call.message.chat.id]['sex_input'][int(call.data.split()[1])] = not TINY_DB[call.message.chat.id]['sex_input'][int(call.data.split()[1])]
                
                for i in TINY_DB[call.message.chat.id]['sex_input']:
                    if not i:
                        keyboard.add(list.pop())
                    if i:
                        a = list.pop()
                        a.text = a.text + " ‚úÖ"
                        keyboard.add(a)
                button_bar = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='sex continue')
                keyboard.add(button_bar)   
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard) 
        
        if 'mate' in call.data:
            #import pdb; pdb.set_trace()
            keyboard = types.InlineKeyboardMarkup()
            list = [types.InlineKeyboardButton('–ë–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞ üëØ‚Äç‚ôÇÔ∏èüëØ‚Äç‚ôÄÔ∏è', callback_data='mate 3'), types.InlineKeyboardButton('–û–¥–∏–Ω —Å–æ—Å–µ–¥ ü§º‚Äç‚ôÇÔ∏è', callback_data='mate 2'), types.InlineKeyboardButton('–ú—É–∂—á–∏–Ω—ã üë®‚Äçü¶∞', callback_data='mate 1'), types.InlineKeyboardButton('–ñ–µ–Ω—â–∏–Ω—ã üë©‚Äçü¶±', callback_data='mate 0')]
            if call.data.split()[1] == "continue":
                get_animal(call.message)
                l = []
                for i in TINY_DB[call.message.chat.id]['mates_input']:
                    if i:
                        l.append(list.pop().text)
                    else:
                        list.pop()
                TINY_DB[call.message.chat.id]['mates_input'] = l
            else:
                TINY_DB[call.message.chat.id]['mates_input'][int(call.data.split()[1])] = not TINY_DB[call.message.chat.id]['mates_input'][int(call.data.split()[1])]
                
                for i in TINY_DB[call.message.chat.id]['mates_input']:
                    if not i:
                        keyboard.add(list.pop())
                    if i:
                        a = list.pop()
                        a.text = a.text + " ‚úÖ"
                        keyboard.add(a)
                button_bar = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='mates continue')
                keyboard.add(button_bar)   
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard) 
        
        if 'period' in call.data:
            #import pdb; pdb.set_trace()
            keyboard = types.InlineKeyboardMarkup()
            list = [types.InlineKeyboardButton('–î–æ–ª–≥–∏–π' , callback_data='period 1'), types.InlineKeyboardButton('–ö–æ—Ä–æ—Ç–∫–∏–π ', callback_data='period 0')]
            if call.data.split()[1] == "continue":
                get_animal(call.message)
                l = []
                for i in TINY_DB[call.message.chat.id]['period_input']:
                    if i:
                        l.append(list.pop().text)
                    else:
                        list.pop()
                TINY_DB[call.message.chat.id]['period_input'] = l
            else:
                TINY_DB[call.message.chat.id]['period_input'][int(call.data.split()[1])] = not TINY_DB[call.message.chat.id]['period_input'][int(call.data.split()[1])]
                for i in TINY_DB[call.message.chat.id]['period_input']:
                    if not i:
                        keyboard.add(list.pop())
                    if i:
                        a = list.pop()
                        a.text = a.text + " ‚úÖ"
                        keyboard.add(a)
                button_bar = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='period continue')
                keyboard.add(button_bar)   
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard) 
        print(call.data)
        if 'animal' in call.data:
        #import pdb; pdb.set_trace()
            keyboard = types.InlineKeyboardMarkup()
            list = [types.InlineKeyboardButton('–°–æ–±–∞–∫–∞ü¶Æ' , callback_data='animal 1'), types.InlineKeyboardButton('–ö–æ—à–∫–∞ üêà‚Äç‚¨õ', callback_data='animal 0')]
            
            if call.data.split()[1] == "continue":
                old_start(call.message)
                l = []
                for i in TINY_DB[call.message.chat.id]['animal_input']:
                    if i:
                        l.append(list.pop().text)
                    else:
                        list.pop()
                TINY_DB[call.message.chat.id]['animal_input'] = l
            else:
                TINY_DB[call.message.chat.id]['animal_input'][int(call.data.split()[1])] = not TINY_DB[call.message.chat.id]['animal_input'][int(call.data.split()[1])]
                print(TINY_DB[call.message.chat.id]['animal_input'][int(call.data.split()[1])])
                print(int(call.data.split()[1]))
                for i in TINY_DB[call.message.chat.id]['animal_input']:
                    if not i:
                        keyboard.add(list.pop())
                    if i:
                        a = list.pop()
                        a.text = a.text + " ‚úÖ"
                        keyboard.add(a)
                button_bar = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='animal continue')
                keyboard.add(button_bar)   
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard) 

        if 'max' in call.data:
            if 'continue' in call.data:
                #import pdb;pdb.set_trace()
                bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
                get_undergrounds(call.message.chat.id)
        
        if 'dist' in call.data:
            if 'continue' in call.data:
                bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
                get_metro_dist(call.message, skip=True)
        
        if 'author' in call.data:
            if 'continue' in call.data:     
                bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
                get_author_type(call.message, skip=True)
            if 'yes' in call.data:
                bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
                get_author_type(call.message, skip=False, author=True)
        
        if 'undergrounds' in call.data:
            if 'continue' in call.data:
                bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
                get_undergrounds(call.message, skip=True)
                
        if 'start' in call.data:
           # import pdb;pdb.set_trace
          
            keyboard = types.InlineKeyboardMarkup()
            #list = [types.InlineKeyboardButton('–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã', callback_data='start 2'), types.InlineKeyboardButton('–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã', callback_data='start 1'), types.InlineKeyboardButton('–ö–æ–º–Ω–∞—Ç—ã', callback_data='start 0')]
            list = [types.InlineKeyboardButton('–ö–æ–º–Ω–∞—Ç—ã', callback_data='start 0')]
            if call.data.split()[1] == "continue":
                get_rooms(call.message)
                #bot.register_next_step_handler(call.message, lambda msg: get_rooms(msg, rooms=TINY_DB[call.data.message.chat.id]))
            else:
                TINY_DB[call.message.chat.id]['rooms_input'][int(call.data.split()[1])] = not TINY_DB[call.message.chat.id]['rooms_input'][int(call.data.split()[1])]
                for i in TINY_DB[call.message.chat.id]['rooms_input']:
                    if not i:
                        keyboard.add(list.pop())
                    if i:
                        a = list.pop()
                        a.text = a.text + " ‚úÖ"
                        keyboard.add(a)
                button_bar = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='start continue')
                keyboard.add(button_bar)   
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard) 

        if "cian.ru" in call.data:
            try:
                save_action(call.message.chat.id, 'desc')
                print(call.message.chat.id)
                #import pdb; pdb.set_trace()
                a = load_cache()
                msg = bot.send_message(call.message.chat.id, f"üìîüìî –û–ø–∏—Å–∞–Ω–∏–µ\n\n {a[str(call.message.chat.id)]['last 20'][call.data]}", reply_to_message_id=call.message.id)
                bot.pin_chat_message(chat_id=msg.chat.id, message_id=msg.message_id)
            except:
                pass
            
        # button_foo = types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ', callback_data='new')
    
    @bot.message_handler(commands=['start'])
    def start(message):
        keyboard = types.InlineKeyboardMarkup()
        button_bar = types.InlineKeyboardButton('–ü—Ä–∏—Å—Ç—É–ø–∏–ºüèÉ‚Äç‚ôÄÔ∏èüèÉüö¥‚Äç‚ôÇÔ∏è', callback_data='startstart') 
        keyboard.add(button_bar)
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ *–¶–∏–∞–Ω–µ (–ø–æ –ú–æ—Å–∫–≤–µ)* –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å –∫–æ—à–∫–æ–π) *–≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –º–∏–Ω—É—Ç* –ø–æ—Å–ª–µ –∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ—ç—Ç–æ–º—É *–¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç—ã!*\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –ø—Ä–∏—Å—Ç—É–ø–∏–º? \n @KvartiraDar - –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", reply_markup=keyboard, parse_mode= 'Markdown')
        
        
    
    @bot.message_handler(func=lambda message: True)
    def start_start(message):
        TINY_DB[message.chat.id] = {}
        keyboard = types.InlineKeyboardMarkup()
        button_bar = types.InlineKeyboardButton('–ñ–µ–Ω—â–∏–Ω–∞üë©‚Äçü¶± ', callback_data='sex 0')
        keyboard.add(button_bar)
        button_bar = types.InlineKeyboardButton('–ú—É–∂—á–∏–Ω–∞ü§µ‚Äç‚ôÇÔ∏è', callback_data='sex 1') 
        keyboard.add(button_bar)
        button_bar = types.InlineKeyboardButton('–Ø –æ–¥–∏–Ω', callback_data='sex 2') 
        keyboard.add(button_bar)
        button_bar = types.InlineKeyboardButton('–ù–∞—Å –¥–≤–æ–µ', callback_data='sex 3') 
        keyboard.add(button_bar)
        TINY_DB[message.chat.id]['sex_input'] = [False, False, False, False]
        bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª, –¥–∞–∂–µ –µ—Å–ª–∏ –≤–∞—Å –¥–≤–æ–µ.\n –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –∏—â–µ—Ç –ª—é–¥–µ–π –≤–∞—à–µ–≥–æ –ø–æ–ª–∞, —Å —É—á—ë—Ç–æ–º –≤–∞—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.\n–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.", reply_markup=keyboard)
    
    
    def get_mates(message):
        keyboard = types.InlineKeyboardMarkup()
        
        button_bar2 = types.InlineKeyboardButton('–ñ–µ–Ω—â–∏–Ω—ã üë©‚Äçü¶±', callback_data='mate 0')
        button_bar = types.InlineKeyboardButton('–ú—É–∂—á–∏–Ω—ã üë®‚Äçü¶∞', callback_data='mate 1')
        keyboard.add(button_bar2)
        keyboard.add(button_bar)
        
        button_bar = types.InlineKeyboardButton('–û–¥–∏–Ω —Å–æ—Å–µ–¥ ü§º‚Äç‚ôÇÔ∏è', callback_data='mate 2')
        button_bar2 = types.InlineKeyboardButton('–ë–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞ üëØ‚Äç‚ôÇÔ∏èüëØ‚Äç‚ôÄÔ∏è', callback_data='mate 3')
        keyboard.add(button_bar)
        keyboard.add(button_bar2)
        TINY_DB[message.chat.id]['mates_input'] = [False, False, False, False]
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ. –ö–æ–≥–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–∏–¥–µ—Ç—å –≤ –≤–∞—à—Ö —Å–æ—Å–µ–¥—è—Ö?\n" 
                         "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.", reply_markup=keyboard)
        
    def get_rent_period(message):
        keyboard = types.InlineKeyboardMarkup()
        button_bar = types.InlineKeyboardButton('–ö–æ—Ä–æ—Ç–∫–∏–π', callback_data='period 0')
        button_bar2 = types.InlineKeyboardButton('–î–æ–ª–≥–∏–π', callback_data='period 1')
        keyboard.add(button_bar)
        keyboard.add(button_bar2)
        TINY_DB[message.chat.id]['period_input'] = [False, False]
        bot.send_message(message.chat.id, "–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã?\n" 
                         "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.", reply_markup=keyboard)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
    def get_animal(message):
        keyboard = types.InlineKeyboardMarkup()
        button_bar = types.InlineKeyboardButton('–ö–æ—à–∫–∞ üêà‚Äç‚¨õ', callback_data='animal 0')
        button_bar2 = types.InlineKeyboardButton('–°–æ–±–∞–∫–∞ ü¶Æ', callback_data='animal 1')
        
        keyboard.add(button_bar)
        keyboard.add(button_bar2)
        button_bar = types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='animal continue')
        keyboard.add(button_bar)   
        TINY_DB[message.chat.id]['animal_input'] = [False, False]
        bot.send_message(message.chat.id, "–û—Å—Ç–∞–ª–æ—Å—å —á—É—Ç—å-—á—É—Ç—å. –ï—Å—Ç—å –ª–∏ –∂–∏–≤–æ—Ç–Ω—ã–µ?\n" 
                         "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.", reply_markup=keyboard)
    def old_start(message):
        #TINY_DB[message.chat.id] = {}
        TINY_DB[message.chat.id]['state'] = 'start'
        save_action( message.chat.id, 'start')
        keyboard = types.InlineKeyboardMarkup()
        button_bar = types.InlineKeyboardButton('–ö–æ–º–Ω–∞—Ç—ã ', callback_data='start 0')
        keyboard.add(button_bar)
        
        TINY_DB[message.chat.id]['rooms_input'] = [False]
        
        bot.send_message(message.chat.id, "–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?", reply_markup=keyboard)
    def get_rooms(message):
        try:
            #TINY_DB[message.chat.id]['state'] = 'get_rooms'
            
            rooms = []
            global TINY_DB
            rooms_input = TINY_DB[message.chat.id]['rooms_input']
            for i in range(len(rooms_input)):
                if rooms_input[i]:
                    rooms.append({'rooms': i, 'min_price': None, 'max_price': None})
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∞—Ä–µ–Ω–¥–Ω—É—é –ø–ª–∞—Ç—É. (–ù–∞–ø—Ä–∏–º–µ—Ä: 30000)".format(rooms[0]['rooms']))
            TINY_DB[message.chat.id]['rooms'] = rooms                                   
            
            bot.register_next_step_handler(message, lambda msg: get_min_price(msg))
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞.")

    def get_min_price(message, next_=0, rooms=0):
        try:
            if rooms == 0:
                rooms = iter(TINY_DB[message.chat.id]['rooms'])
            if next_ == 0:
                next_ = next(rooms)
            min_price = int(message.text)
            next_['min_price'] = min_price
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∞—Ä–µ–Ω–¥–Ω—É—é –ø–ª–∞—Ç—É.")
            bot.register_next_step_handler(message, lambda msg: get_max_price(msg, next_, rooms))
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    def get_max_price(message, next_, rooms):
        save_action(message.chat.id, 'max_price')
        try:
            max_price = int(message.text)
            if max_price < 500:
                max_price = max_price*1000 
            next_['max_price'] = max_price
            try:
                next_ = next(rooms)
                bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∞—Ä–µ–Ω–¥–Ω—É—é –ø–ª–∞—Ç—É –¥–ª—è {}-–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä.".format(next_['rooms']))
                bot.register_next_step_handler(message, lambda msg: get_min_price(msg, next_, rooms))
            except:
                keyboard = types.InlineKeyboardMarkup()
                button_bar = types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='undergrounds continue')
                keyboard.add(button_bar)  
                bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –ø—Ä–∏–º–µ—Ä: (–°–ó–ê–û, –°–ê–û, –ú–∞—è–∫–æ–≤—Å–∫–∞—è, –ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∞—è)", reply_markup=keyboard)
                
                bot.register_next_step_handler(message, lambda msg: get_undergrounds(msg))
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


    def get_undergrounds(message, skip = False):
        global TINY_DB
        if not skip:
            undergrounds_input = message.text.split(',')
            TINY_DB[message.chat.id]['undergrounds'] = [station.strip() for station in undergrounds_input]
        else :
            TINY_DB[message.chat.id]['undergrounds']=".*"
          
        keyboard = types.InlineKeyboardMarkup()
        button_bar = types.InlineKeyboardButton('–î–∞', callback_data='author yes')
        keyboard.add(button_bar) 
        
        button_bar = types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='author continue')
        keyboard.add(button_bar)
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ª–∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤?\n", reply_markup=keyboard)
                               
        
    def get_author_type(message, skip = False, author = False):
        global TINY_DB
        
        if not skip and author:
            TINY_DB[message.chat.id]['author_type'] = "–í–ª–∞–¥–µ–ª–µ—Ü"
        else:
            TINY_DB[message.chat.id]['author_type'] = "–õ—é–±–æ–π"
        
        keyboard = types.InlineKeyboardMarkup()
        button_bar = types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='dist continue')
        keyboard.add(button_bar)  
        bot.register_next_step_handler(message, lambda msg: get_metro_dist(msg))
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ –º–µ—Ç—Ä–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)\n", reply_markup=keyboard)                                 
        



    def get_metro_dist(message, skip = False):
       # import pdb; pdb.set_trace()
        TINY_DB[message.chat.id]['period_input'] = ""
        bot.register_next_step_handler(message, lambda msg: start(msg))
        if not skip:
            TINY_DB[message.chat.id]['metro_dist'] = int(message.text)
        else:
            TINY_DB[message.chat.id]['metro_dist'] = 1000
        all_params = load_parameters()
        
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        all_params[str(message.chat.id)] = {
            'rooms': TINY_DB[message.chat.id]['rooms'],
            'undergrounds': TINY_DB[message.chat.id]['undergrounds'],
            'chat_id': message.chat.id,
            'author_type' : TINY_DB[message.chat.id]['author_type'],
            'metro_dist': TINY_DB[message.chat.id]['metro_dist'],
            'sex': TINY_DB[message.chat.id]['sex_input'],
            'animal': TINY_DB[message.chat.id]['animal_input'] ,
            'mates': TINY_DB[message.chat.id]['mates_input'],
            'period': TINY_DB[message.chat.id]['period_input']
        }
        
        
        save_parameters(all_params)  
        ads_to_filter = []
        ads = load_ads()
        do_flag = False
        for segment in ads:
        
            for ad in ads[segment][-200:]:
                
                if 'addon' in ad:
                    ads_to_filter = ads_to_filter + [ad]
        
        #import pdb; pdb.set_trace()
        params = load_parameters()
        params = all_params[str(message.chat.id)]
        filtered_ads = filter_ads(ads_to_filter, params)
        
        for ad in filtered_ads[-20:]:
            
            msg = f"""{ad['title']}
üöá–ú–µ—Ç—Ä–æ: {ad['underground']} {ad['metro_dist']}
üßç‚Äç‚ôÇÔ∏è–ê–≤—Ç–æ—Ä: {ad['author_type']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {ad['rooms_count']}
üí∏–¶–µ–Ω–∞: {ad['price_per_month']}‚ÇΩ
üèò–†–∞–π–æ–Ω: {ad['district']}
üîó–ò—Å—Ç–æ—á–Ω–∏–∫: {ad['url']}\n
    """
            if 'addon' in ad:
                parsed_addon = parse_addon(ad['addon'], params=params, good_description=ad['good_description'])
                msg = msg + parsed_addon  
                        #  import pdb; pdb.set_trace()
            else:
                parsed_addon = ""
            
            if parsed_addon != "":
                bot.send_message(message.chat.id, msg)
                do_flag = True
        if do_flag:
            bot.send_message(message.chat.id, "–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏ –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å, —Ç–∞–∫–∂–µ —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –í–∞—Å –æ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è. \n t.me/FlatoonChat - –≤—Å–µ-–≤—Å–µ-–≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
        else:
            bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. \n t.me/FlatoonChat - –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
        bot.send_message(message.chat.id, "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test_subscription")
    bot.polling(none_stop=True)
               
    #import threading
    #threading.Thread(target=watch_json_file, daemon=True).start()
def send_greeting_ads():
    pass
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        try:
            main()
        except Exception as e:
            print(e)
        