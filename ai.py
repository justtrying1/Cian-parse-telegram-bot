
import requests
import json
import os
from dotenv import load_dotenv
from json.decoder import JSONDecodeError

# Укажите ваш API ключ
api_key = os.environ.get("OPENAI_API_KEY")

# URL для запроса к API ChatGPT
url = 'https://api.openai.com/v1/chat/completions'

# Заголовки для запроса
headers = {
    'Authorization': f'Bearer {api_key}',
    'Content-Type': 'application/json'
}

# Данные для запроса

data_ = {
    'model': 'gpt-4o-mini', 
    'messages': [ {'role': 'user', 'content': r"{0} {1}"}
    ]
}
# Отправка POST-запроса с использованием прокси
def send_request(desc, data, type):
    if type == 0:
        stroka = """
            Есть текст объявления о поиске арендателя, если информации не указано конкретно в тексте, то пиши "не указано" этот формат необходимо преобразовать в json: {
    {
    
    "кто живёт в настоящий момент": 
        { 
        название сущности : [какого пола (женщина? мужчина?), сколько лет?]  КАЖДОГО ИНДИВИДУУМА НЕОБХОДИМО ВСТАВИТЬ ПОД ОТДЕЛЬНЫЙ КЛЮЧ, У КАЖДОГО ИНДИВИДУУМА ДОЛЖЕН БЫТЬ УКАЗАН ПОЛ, СЕМЕЙНАЯ ПАРА - ЭТО ДВЕ СУЩНОСТИ, Если сказано, что никто не живёт значит сущность называется "никто" и дальше список можно не заполнять!
        },  
    "тип разыскиваемого жильца": [мужчина?, женщина?], ( в списке может быть несколько типов разсыкиваемого жильца,  пометка: если ищут "человека" - это и мужчина и женщина одновременно)
    
    "характер ограничения": если только разыскиваются указанные типы разыскиваемого жильца, то пиши "строго", если в объявлении написано о предпочтении, то пиши "предпочтение" , 
    "можно ли заселиться с животными": да или нет или оговаривается?,
    "изолированная ли комната": да или нет?,
    "срок сдачи":  долгий? короткий? короткий - это до 6 месяцев, всё остальное долгий. Пиши только если указано в тексте !!
    }
            Данный JSON не является корректным с точки зрения отступов, пожалуйста в своём ответе преврати его в адекватный json формат 
            информацию указывай, только если она есть и чётко прописана в тексте !!!! иначе пиши "не указано"
            Пожалуйста, в ответах возвращай только json без всяких комментариев и без кавычек
            Вот сам текст объявления: """
    
    if type == 1:
        stroka = """
            есть текст обявления, если не написано кого ищут конкретно в тексте, то пиши "не указано", тебе нужно вытащить из него коротко основную информацию о том кого ищут, на какой срок, можно ли с животными, кто живёт в квартире в настоящий момент если информации нет в тексте, то пиши "не указано"
            Вот сам текст объявления: """
   
    proxies = {
        'http': 'http://UefPe7:oebC72@196.18.166.178:8000',
        'https': 'http://UefPe7:oebC72@196.18.166.178:8000'
    }
        
    try:
        data['messages'][0]['content'] = data['messages'][0]['content'].format(stroka, desc)
    except:
        pass
    response = requests.post(url, headers=headers, data=json.dumps(data), proxies=proxies)
    #print(data['messages'][0]['content'])
    # Проверка статуса ответа
    if response.status_code == 200:
        # Парсинг JSON-ответа
        response_data = response.json()
        #print(response_data['choices'][0]['message']['content'])
        return(response_data['choices'][0]['message']['content'])
    else:
        print(f'Ошибка: {response.status_code}, {response.text}')
    
desc = """
Сдается комната в 2-х комнатной квартире на длительный срок. Рассмотрим только девушек, женщин. Без животных и детей. Все вопросы по телефону.

"""



def chain_prompt(desc, data, type):
    
    a = send_request(desc, data, type=type)
    good_description = a
    print(a)
    if type == 0:
        data['messages'].append({"role": "assistant", "content":"{}".format(a)})
        data['messages'].append({"role":"user", "content":"перепроверь всё что ты написал: , если есть написано, что есть соседи, то укажи их в соответствующем пункте. В пункте можно ли с животными можно указать одним словом 'кошка' или 'собака', если тип разсыкиваемого жильца 'человек', то пиши не указано"
                                 "в квартире никто не живёт, если не написано информации о проживающих в настоящий момент людях, то пиши название сущности проживающей в настоящий момент 'не указано', если тип разсыкиваемого жильца 'человек', то пиши не указано, считай, семья - это пара."
                                   """
'
"ищут ли одну женщину/девушку": да или нет?,
"ищут ли одного мужчину/парня": да или нет?,
"ищут ли семейную пару": да или нет?, 
"ищут ли двух женщин/девушек ":  да или нет?, 
"ищут ли двух мужчин/парней ":  да или нет?, 
ДОБАВЬ ЭТИ ПУНКТЫ, каждый из этих пунктов отвечает отдельной сущности, которой ищут арендодатели, то есть если количество вариантов которые рассматривают арендодатели = 2, то и отметок "да" тоже должно быть ровно 2
"""})
    
    if type == 1:
        data['messages'].append({"role": "assistant", "content":"{}".format(a)})
        data['messages'].append({"role":"user", "content":"Теперь нужно заполнить json, если информации нет, то пиши 'не указано'. В пункте можно ли с животными можно указать одним словом 'кошка' или 'собака', если тип разсыкиваемого жильца 'человек', то пиши не указано"
                                 "в квартире никто не живёт, если не написано информации о проживающих в настоящий момент людях, то пиши название сущности проживающей в настоящий момент 'не указано', если тип разсыкиваемого жильца 'человек', то пиши не указано, считай, семья - это пара."
                                   """
'
 "сколько людей живёт в настоящий момент в квартире?": число,
 "кто живёт в настоящий момент": 
        { 
        название сущности : [(женщина? мужчина?), число сколько лет?]  КАЖДОГО ИНДИВИДУУМА НЕОБХОДИМО ВСТАВИТЬ ПОД ОТДЕЛЬНЫЙ КЛЮЧ, У КАЖДОГО ИНДИВИДУУМА ДОЛЖЕН БЫТЬ УКАЗАН ПОЛ, СЕМЕЙНАЯ ПАРА - ЭТО ДВЕ СУЩНОСТИ, Если сказано, что никто не живёт значит сущность называется "никто" и дальше список можно не заполнять!
        },  
    "характер ограничения": если только разыскиваются указанные типы разыскиваемого жильца, то пиши "строго", если в объявлении написано о предпочтении, то пиши "предпочтение" , 
    "можно ли заселиться с животными": да или нет?,
    "изолированная ли комната": да или нет?,
        }
        "сколько комнат в квартире": число?,
        "ищут ли одного человека": да или нет?,
"ищут ли двух человек": да или нет?,
"ищут ли одну женщину/девушку": да или нет?,
"ищут ли одного мужчину/парня": да или нет?,
"ищут ли пару из мужчины и женщины": да или нет?, 
"ищут ли пару женщин/девушек ":  да или нет?, 
"ищут ли пару мужчин/парней ":  да или нет?, 
Если нет информации пиши "не указано"
Мужчины и женщины - это тоже люди.
ДОБАВЬ ЭТИ ПУНКТЫ, каждый из этих пунктов отвечает отдельной сущности, которой ищут арендодатели, то есть если количество вариантов которые рассматривают арендодатели = 2, то и отметок "да" тоже должно быть ровно 2
        В обратном сообщении верни только корректный JSON  без каких либо дополнительных комментариев и кавычек
        Помарка: если в квартире живут две девушки/мужчин/ или пара, то это не означает, что арендодатель ищет их
"""})
    
    if type == 2:
        data['messages'].append({"role": "assistant", "content":"{}".format(a)})
        data['messages'].append({"role":"user", "content":"Верни мне такой формат json, c помощью которого я смогу отфильтровать объявление для всевозможных пар и одиночек ищущих комнату для жилья"})

    #import pdb; pdb.set_trace()
    while True:
        
        try:
            if len(data['messages']) > 6:
                print("messages > 6")
                break
            a = send_request(desc, data, type=type)
            b = json.loads(r"[{}]".format(a))
            break
        except JSONDecodeError as e:
            print(e)
            data['messages'].append({"role": "assistant", "content":"{}".format(a)})
            data['messages'].append({"role":"user", "content":"Исправь json  чтобы я твое сообщение его мог преобразовать с помощью json.loads() на Python"})
    print(desc)           
   
    print(b)
    global data_
    data_ = {
    'model': 'gpt-4o-mini', 
    'messages': [ {'role': 'user', 'content': r"{0} {1}"}
    ]
}
    return(b, good_description)

#print(send_request(desc, data_, type= 2))
#chain_prompt(desc, data_, type =1 )
#print(data_)